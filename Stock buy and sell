// we know prices of a stock for upcoming n days. we can buy the stock on any day and sell the stock on any of the upcoming days. we need to maxmise the profit.
// if the prices are in decreasing order, we can never get any profit.
// if the prices are sorted in increasing order, then we can always buy the stock on first day and sell it on the last day.

// naive solution
// using recursion
// find pairs such that i<j, and price[i]<price[j]
// find profit and recursilvely call for left of i and right of j
// return the maximum of all the profit found

 int maxprofit(int[] price, int start, int end)
 {
  if(end<=start)
    return 0;
    
  int profit =0;
  for(int i=start;i<end;i++)
  {
    for(int j=+1;j<end;j++)
    {
      if(price[j]>price[i])
      {
        int curr_profit=price[j]-price[i]+ maxprofit(price, start, i-1) + max_profit(price,j+1,end)
        profit = max(profit, curr_profit);
      }
    }
  }
  return profit;
 }

// efficient solution
// surprisingly easy solution
// we need to find bottom points and peak points
// buy the stock the the bottom point and sell it at its peak point

int maxprofit(int[] arr, int n)
{
  int profit=0;
  for(int i=1;i<n;i++)
    if(price[i]>price[i-1])
      profit += price[i]-price[i-1];
      
  return profit;
}

( do dry run and understand the solution )
